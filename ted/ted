#!/usr/bin/env python3

import io
import os
import sys
import tty
import time
import enum
import queue
import atexit
import signal
import cProfile
import fractions
import itertools
import threading
import functools
import contextlib

from collections import deque, defaultdict

import pygments.util as pu
import pygments.lexers as pl
import pygments.styles as ps


if 'graal' in os.path.basename(sys.executable):
    CHRT = dict((x, chr(x)) for x in range(0, 10000))

    def chr(c):
        return CHRT[c]


class PubSub:
    def __init__(self):
        self.s = defaultdict(list)

    def sub(self, t, f):
        self.s[t].append(f)

    def pub(self, t, m):
        for f in self.s.get(t, []):
            f(m)

    def msg(self, m):
        self.pub('message', m)


def esc(d):
    return chr(27) + d


def csi(*args):
    res = '[' + str(args[0])

    for a in args[1:]:
        res += ';'
        res += str(a)

    return esc(res)


def move(x, y):
    return csi(y + 1, x + 1) + 'H'


def retval(v):
    def func():
        return v

    return func


class SigWinch(Exception):
    pass


class Channel:
    def __init__(self):
        self.b = deque()
        self.i = io.FileIO(0, 'r')
        self.o = io.FileIO(1, 'w')
        self.q = queue.SimpleQueue()
        self.l = threading.Lock()

        #tty.setraw(self.i)
        os.system('stty raw')
        self.send(csi('?25l'))
        threading.Thread(target=self.runq, daemon=True).start()
        signal.signal(signal.SIGWINCH, self.sigwinch)

    def fini(self):
        os.system('tput reset')
        os.system('stty -raw')

    def sigwinch(self, *args):
        def err():
            if self.l.locked():
                return self.q.get()()

            raise SigWinch()

        self.q.put(err)

    def runq(self):
        try:
            while True:
                self.q.put(retval(self.i.read(1)))
        except Exception as e:
            def err():
                raise e

            self.q.put(err)

    def send(self, cmd):
        self.o.write(cmd.encode())

    def recv(self):
        return ord(self.q.get()())

    def next(self):
        try:
            return self.b.popleft()
        except IndexError:
            pass

        return self.recv()

    def read_seq(self, ch):
        while True:
            s = self.recv()

            if s == 27:
                return self.read_to(ch)[1:]

            self.b.append(s)

    def read_to(self, ch):
        res = []

        while True:
            s = self.recv()

            if s == ch:
                return res

            res.append(s)

    def resp(self, ch):
        return ''.join(chr(x) for x in self.read_seq(ord(ch)))

    def dims(self):
        with self.l:
            return self.dims_nointr()

    def dims_nointr(self):
        n = 16

        while True:
            x, y = self.try_dims(n)

            if x < n and y < n:
                return x, y

            n *= 2

    def try_dims(self, n):
        while True:
            self.send(move(n, n) + csi('6n'))

            y, x = self.resp('R').split(';')

            try:
                return int(x), int(y)
            except ValueError:
                pass


KMAP = [
    ('[A', 'up'),
    ('[B', 'down'),
    ('[C', 'right'),
    ('[D', 'left'),
    ('[F', 'end'),
    ('[H', 'home'),
    ('[1~', 'home'),
    ('[2~', 'insert'),
    ('[3~', 'delete'),
    ('[4~', 'end'),
    ('[5~', 'pageup'),
    ('[6~', 'pagedown'),
    ('[7~', 'home'),
    ('[8~', 'end'),
    ('OP', 'f1'),
    ('OQ', 'f2'),
    ('OR', 'f3'),
    ('OS', 'f4'),
    ('[P', 'f1'),
    ('[Q', 'f2'),
    ('[R', 'f3'),
    ('[S', 'f4'),
    ('[15~', 'f5'),
    ('[17~', 'f6'),
    ('[18~', 'f7'),
    ('[19~', 'f8'),
    ('[20~', 'f9'),
    ('[21~', 'f10'),
    ('[23~', 'f11'),
    ('[24~', 'f12'),
    ('[33~', 'f19'),
]


def make_scan_trie():
    res = {}

    def substr(k):
        s = ''

        for c in k:
            s += c

            yield s

    for k, v in KMAP:
        for sk in substr(k):
            res[sk] = 'int'

        res[k] = v

    return res


def make_ctrl_tables():
    return [(n + 1, f'ctrl-{chr(ch)}') for n, ch in enumerate(range(ord('a'), ord('z')))]


class InputStream:
    TRIE = make_scan_trie()

    ASCII = dict(
        make_ctrl_tables() + [
            (0, 'ctrl-space'),
            (9, 'tab'),
            (10, 'lf'),
            (13, 'cr'),
            (127, 'bs'),
        ]
    )

    def __init__(self, ch):
        self.ch = ch

    def next(self):
        key = self.ch.next()

        if key < 128:
            if key == 27:
                return self.scan_escape()

            val = self.ASCII.get(key)

            if val:
                return val

            if key >= 32:
                return chr(key)

            raise Exception(f'bad key {key}')

        return self.scan_utf8(key)

    def scan_utf8(self, key):
        runes = [key]

        for i in range(0, 4):
            runes.append(self.ch.next())

            try:
                return bytes(runes).decode()
            except UnicodeError:
                pass

    def scan_escape(self):
        p = ''

        while True:
            p += chr(self.ch.next())

            v = self.TRIE.get(p)

            if v:
                if v != 'int':
                    return v
            else:
                raise Exception(f'unknown escape sequence {p}')


class Color24:
    __slots__ = 't'

    def __init__(self, r, g, b):
        self.t = (r, g, b)

    def bg(self):
        return csi(48, 2, *self.t) + 'm'

    def fg(self):
        return csi(38, 2, *self.t) + 'm'


def bg8(n):
    return csi(48, 5, n) + 'm'


def fg8(n):
    return csi(38, 5, n) + 'm'


TBL8 = [(bg8(n), fg8(n)) for n in range(0, 256)]


class Color8:
    __slots__ = 'n'

    def __init__(self, n):
        self.n = n

    def bg(self):
        return TBL8[self.n][0]

    def fg(self):
        return TBL8[self.n][1]


def bg4(n):
    if n < 8:
        return csi(40 + n) + 'm'

    return csi(92 + n) + 'm'


def fg4(n):
    if n < 8:
        return csi(30 + n) + 'm'

    return csi(82 + n) + 'm'


TBL4 = [(bg4(x), fg4(x)) for x in range(0, 16)]


class Color4:
    __slots__ = 'n'

    def __init__(self, n):
        self.n = n

    def bg(self):
        return TBL4[self.n][0]

    def fg(self):
        return TBL4[self.n][1]


def black():
    return Color4(0)


def white():
    return Color4(15)


def gray(n):
    return Color8(232 + n)


class Attrs:
    __slots__ = 't'

    def __init__(self, c=None, b=None, f=None):
        self.t = (c, b, f)

    def fmt(self):
        c, b, f = self.t

        return b.bg() + f.fg() + c


def combine_attrs(a1, a2):
    c1, b1, f1 = a1.t
    c2, b2, f2 = a2.t

    return Attrs(c=c2 or c1, b=b2 or b1, f=f2 or f1)


class Async:
    def __init__(self):
        self.q = queue.SimpleQueue()

        threading.Thread(target=self.runq, daemon=True).start()

    def runq(self):
        while True:
            self.q.get()()

    def schedule(self, f):
        self.q.put(f)


def singleton(func):
    @functools.wraps(func)
    def wrapper():
        while True:
            try:
                return func.__result__
            except AttributeError:
                func.__result__ = func()

    return wrapper


@singleton
def asyncmngr():
    return Async()


def schedule(f):
    asyncmngr().schedule(f)


class Display:
    def __init__(self, ch):
        self.ch = ch

        dx, dy = self.ch.dims()

        self.dx = dx
        self.dy = dy
        self.dd = {}

    def flip(self, pixels):
        ds = ''
        dd = self.dd
        bp = {}
        dx = self.dx
        dy = self.dy

        for x, y, n in pixels:
            if x >= 0 and x < dx and y >= 0 and y < dy:
                k = x + y * 10000
                v = bp.get(k)

                if v:
                    bp[k] = (x, y, combine_attrs(v[2], n))
                else:
                    bp[k] = (x, y, n)

        p = None

        for k in sorted(bp.keys()):
            x, y, n = bp[k]

            f = n.fmt()

            if f != dd.get(k):
                dd[k] = f

                if k - 1 == p:
                    pass
                else:
                    ds += move(x, y)

                p = k
                ds += f

        schedule(lambda: self.ch.send(ds))


class Panel:
    def __init__(self, w, h, p):
        self.w = w
        self.h = h
        self.p = p

    def pixels(self):
        for y in range(0, self.h):
            for x in range(0, self.w):
                yield x, y, self.p

    def dispatch(self, ev):
        pass


class Handle:
    def __init__(self, w):
        self.w = w
        self.move(0, 0)

    def pixels(self):
        for x, y, c in self.w.pixels():
            yield x + self.x, y + self.y, c

    def dispatch(self, ev):
        self.w.dispatch(ev)

    def move(self, x, y):
        self.x = x
        self.y = y

        return self


class Stack:
    def __init__(self):
        self.o = []

    def add_widget(self, w):
        h = Handle(w)

        self.o.append(h)

        return h

    def pixels(self):
        for o in self.o:
            yield from o.pixels()

    def dispatch(self, ev):
        if self.o:
            self.o[-1].dispatch(ev)


class EventLoop:
    def __init__(self, ch):
        self.d = Display(ch)
        self.i = InputStream(ch)

    def loop(self, w):
        while True:
            self.d.flip(w.pixels())

            ev = self.i.next()

            if ev == 'ctrl-c':
                raise KeyboardInterrupt()

            w.dispatch(ev)


def parse_color(s):
    c = s.get('color')

    if c:
        return Color24(int(c[0:2], 16), int(c[2:4], 16), int(c[4:6], 16))

    return white()


def guess_lexer(p, d):
    try:
        return pl.guess_lexer_for_filename(p, d)
    except pu.ClassNotFound:
        return pl.guess_lexer(d)


class HighLight:
    def __init__(self, p, d):
        self.lex = guess_lexer(p, d[:10000])
        self.stl = ps.get_style_by_name('material')
        self.lns = {}

    def style_line_impl(self, l):
        for typ, text in self.lex.get_tokens(l):
            s = parse_color(self.stl.style_for_token(typ))

            for ch in text:
                if ch == '\n':
                    pass
                else:
                    yield ch, s

    def style_line(self, l):
        if len(self.lns) > 10000:
            self.lns.clear()

        while True:
            try:
                return self.lns[l]
            except KeyError:
                r = list(self.style_line_impl(l))

                if len(l) != len(r):
                    r = [(x, white()) for x in l]

                self.lns[l] = r


class TextArray:
    def __init__(self, d):
        self.d = d
        self.split()

    def split(self):
        self.l = self.d.split('\n')

    def at(self, pos):
        if pos < 0:
            raise IndexError()

        return self.d[pos]

    def delete(self, pos):
        self.d = self.d[:pos] + self.d[pos + 1:]
        self.split()

    def insert(self, pos, c):
        self.d = self.d[:pos] + c + self.d[pos:]
        self.split()

    def y(self, pos):
        return self.d[:pos].count('\n')

    def lines(self, fr, to):
        try:
            for i in range(fr, to):
                yield i, self.l[i]
        except IndexError:
            pass

    def length(self):
        return len(self.d)

    def result(self):
        return ('\n'.join(x.rstrip() for x in self.l)).strip() + '\n'


class TextCache:
    def __init__(self, t):
        self.t = t
        self.clear()

    def clear(self):
        self.c = {}

    def at(self, pos):
        return self.t.at(pos)

    def insert(self, pos, ch):
        self.clear()
        self.t.insert(pos, ch)

    def delete(self, pos):
        self.clear()
        self.t.delete(pos)

    def y(self, pos):
        cp = pos - pos % 256

        if cp not in self.c:
            self.c[cp] = self.t.y(cp)

        res = self.c[cp]

        for c in range(cp, pos):
            if self.at(c) == '\n':
                res += 1

        return res

    def lines(self, fr, to):
        return self.t.lines(fr, to)

    def length(self):
        return self.t.length()

    def result(self):
        return self.t.result()


class Editor:
    def __init__(self, p, b):
        with open(p) as f:
            d = f.read()

        self.h = HighLight(p, d)
        self.t = TextCache(TextArray(d))
        self.c = 0
        self.b = b

    def save(self, p):
        with open(p, 'w') as f:
            f.write(self.t.result())

    def complete_ratio(self):
        return fractions.Fraction(self.c + 1, self.t.length() + 1)

    @property
    def x(self):
        n = 0

        for c in self.iter_chars_before(self.c):
            if c == '\n':
                break

            n += 1

        return n

    @property
    def y(self):
        return self.t.y(self.c)

    def render(self, x1, y1, x2, y2):
        for y, s in self.t.lines(y1, y2):
            l = self.h.style_line(s)

            for x in range(x1, min(x2, len(l))):
                c, col = l[x]

                if c != ' ':
                    yield x, y, c, col

    def iter_chars_before(self, p):
        while p > 0:
            p -= 1

            yield self.t.at(p)

    def iter_lines_before(self, p):
        s = ''

        for ch in self.iter_chars_before(p):
            if ch == '\n':
                yield s

                s = ''
            else:
                s = ch + s

        if s:
            yield s

    def get_indent_base_line(self, p):
        for i in itertools.islice(self.iter_lines_before(p), 1, None):
            if i.strip():
                return i

        return ''

    def calc_indent_for(self, l):
        s = ''

        for c in l:
            if c == ' ':
                s += c
            else:
                break

        if l and l[-1] in (':', '{', '[', '('):
            s += '    '
        elif l.strip().split(' ')[0] in ('return', 'break', 'continue', 'raise', 'throw', 'pass'):
            s = s[4:]

        return s

    def calc_indent(self):
        return self.calc_indent_for(self.get_indent_base_line(self.c))

    def ins_indent(self):
        indent = self.calc_indent()

        self.b.msg(f'indent: {indent}')

        for ch in indent:
            self.handle_char(ch)

    def run_indent(self):
        self.key_home()
        self.del_space()
        self.ins_indent()

    def getch(self):
        return self.t.at(self.c)

    def space(self):
        return self.getch() == ' '

    def set_pos(self, c):
        self.t.at(c)
        self.c = c

    def one_right(self):
        self.set_pos(self.c + 1)

    def one_left(self):
        self.set_pos(self.c - 1)

    def del_space(self):
        while self.space():
            self.key_delete()

    def dispatch(self, ev, h):
        if len(ev) == 1:
            self.handle_char(ev)
        else:
            self.handle_event(ev, h)

    def key_tab(self):
        self.run_indent()

    def key_pagedown(self, h):
        for i in range(0, h):
            self.key_down()

    def key_pageup(self, h):
        for i in range(0, h):
            self.key_up()

    def key_cr(self):
        self.key_lf()

    def key_lf(self):
        self.handle_char('\n')
        self.run_indent()

    def key_home(self):
        try:
            self.one_left()

            while self.getch() != '\n':
                self.one_left()

            self.one_right()
        except IndexError:
            pass

    def key_end(self):
        while self.getch() != '\n':
            self.one_right()

    def key_left(self):
        self.one_left()

        if self.space():
            while self.space():
                self.one_left()

            self.one_right()

    def key_right(self):
        if self.space():
            while self.space():
                self.one_right()
        else:
            self.one_right()

    def skip_at_max(self, cnt):
        for i in range(0, cnt):
            if self.getch() == '\n':
                break

            self.one_right()

    def key_up(self):
        x = self.x

        self.key_home()
        self.one_left()
        self.key_home()
        self.skip_at_max(x)

    def key_down(self):
        x = self.x

        self.key_end()
        self.one_right()
        self.skip_at_max(x)

    def key_bs(self):
        self.one_left()

        if self.space():
            while self.space():
                self.key_delete()
                self.one_left()

            self.one_right()
        else:
            self.key_delete()

    def key_delete(self):
        self.t.delete(self.c)

    def handle_event(self, ev, h):
        self.b.msg(ev)

        def unknown():
            self.b.msg(f'do not know to do: {ev}')

        func = getattr(self, 'key_' + ev.replace('-', '_'), unknown)

        try:
            try:
                func()
            except TypeError:
                func(h)
        except IndexError:
            self.b.msg('index error')

    def handle_char(self, ch):
        self.t.insert(self.c, ch)
        self.one_right()


class EditorWidget:
    def __init__(self, w, h, e):
        self.e = e
        self.x = fractions.Fraction(0)
        self.y = fractions.Fraction(0)
        self.w = w
        self.h = h
        self.adjust()

    def pixels(self):
        bx = int(self.x)
        by = int(self.y)

        for x, y, c, col in self.e.render(bx, by, bx + self.w, by + self.h):
            yield x - bx, y - by, Attrs(c=c, f=col)

        yield self.cx, self.cy, Attrs(f=black(), b=white())

    @property
    def cx(self):
        return self.e.x - int(self.x)

    @property
    def cy(self):
        return self.e.y - int(self.y)

    def set_width(self, w):
        self.w = w
        self.adjust()

    def dispatch(self, ev):
        self.e.dispatch(ev, self.h)
        self.adjust()

    def adjust(self):
        oy = self.y

        hw = fractions.Fraction(self.w, 2)
        hh = fractions.Fraction(self.h, 2)

        while self.cx < 0:
            self.x -= hw

        while self.cy < 0:
            self.y -= hh

        while self.cx >= self.w:
            self.x += hw

        while self.cy >= self.h:
            self.y += hh

        if oy != self.y:
            self.pub_lineno()

        self.e.b.pub('cursor', {
            'x': self.cx,
            'y': self.cy,
        })

    def pub_lineno(self):
        self.e.b.pub('lineno', int(self.y))


class Rect:
    def __init__(self, w, h):
        self.w = w
        self.h = h

    def chars(self):
        yield 0, 0, 0x2553
        yield self.w - 1, 0, 0x2556
        yield self.w - 1, self.h - 1, 0x255C
        yield 0, self.h - 1, 0x2559

        for x in range(1, self.w - 1):
            yield x, 0, 0x2500
            yield x, self.h - 1, 0x2500

        for y in range(1, self.h - 1):
            yield 0, y, 0x2551
            yield self.w - 1, y, 0x2551

    def pixels(self):
        for x, y, c in self.chars():
            yield x, y, Attrs(c=chr(c))


@contextlib.contextmanager
def channel():
    ch = Channel()

    try:
        yield ch
    finally:
        ch.fini()


class Label:
    def __init__(self):
        self.t = ''

    def pixels(self):
        for x, c in enumerate(self.t):
            yield x, 0, Attrs(c=c)


class VLine:
    def __init__(self, h):
        self.h = h

    def pixels(self):
        yield 0, 0, Attrs(c=chr(0x252C))
        yield 0, self.h - 1, Attrs(c=chr(0x2534))

        a = Attrs(c=chr(0x2502))

        for y in range(1, self.h - 1):
            yield 0, y, a

    def dispatch(self, ev):
        pass


class LineNo:
    def __init__(self, s, c):
        self.s = s
        self.c = c

    @property
    def h(self):
        return self.c

    def width(self):
        return len(str(self.s + self.c))

    def pixels(self):
        for x, y, c in self.chars():
            yield x, y, Attrs(c=c, f=gray(8))

    def chars(self):
        w = self.width()

        for y, s in enumerate(range(self.s, self.s + self.c)):
            l = str(s)
            dx = w - len(l)

            for x, c in enumerate(l):
                yield dx + x, y, c


def editor_widget(ed, w, h):
    bus = ed.b

    st_w = Stack()

    st_w.add_widget(Panel(w, h, Attrs(c=' ', b=black(), f=white())))
    st_w.add_widget(Rect(w, h))

    ln_w = LineNo(0, h - 2)
    vl_w = VLine(h)
    lb_w = Label()
    cp_w = Panel(w - 2, 1, Attrs(b=gray(4)))
    pp_w = Panel(1, 1, Attrs(b=gray(16)))
    ew_w = EditorWidget(w, h - 2, ed)

    ln_h = st_w.add_widget(ln_w)
    vl_h = st_w.add_widget(vl_w)
    lb_h = st_w.add_widget(lb_w)
    cp_h = st_w.add_widget(cp_w)
    pp_h = st_w.add_widget(pp_w)
    ew_h = st_w.add_widget(ew_w)

    def on_lineno(ln):
        ln_w.s = ln

        ln_h.move(1, 1)
        vl_h.move(ln_h.x + ln_w.width(), 0)
        lb_h.move(1, 0)
        ew_h.move(vl_h.x + 1, 1)
        ew_w.set_width(w - 2 - vl_h.x)

    def on_message(m):
        lb_w.t = m

    def on_cursor(c):
        pp_h.move(vl_h.x, int(ln_h.y + ln_w.h * ed.complete_ratio()))
        cp_h.move(1, ew_h.y + c['y'])

    bus.sub('message', on_message)
    bus.sub('lineno', on_lineno)
    bus.sub('cursor', on_cursor)

    ew_w.pub_lineno()

    return st_w


def main():
    fn = sys.argv[1]
    ed = Editor(fn, PubSub())

    try:
        with channel() as ch:
            while True:
                try:
                    ev = EventLoop(ch)

                    return ev.loop(editor_widget(ed, ev.d.dx, ev.d.dy))
                except SigWinch:
                    pass

                ed.b = PubSub()
    except:
        ed.save(fn + '.bak')

        raise


try:
    main()
    #cProfile.run('main()')
except KeyboardInterrupt:
    pass
