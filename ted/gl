#!/usr/bin/env python3

import sys

import OpenGL

OpenGL.ERROR_CHECKING = False

import OpenGL.GL as gl
import OpenGL.GLU as glu
import OpenGL.GLUT as glut


class Ted(dict):
    def __init__(self):
        self.__dict__ = self
        self.__name__ = 'ted'
        exec(open('./ted').read().encode(), self, self)


ted = Ted()


class Window:
    def __init__(self, w, h, t):
        self.w = w
        self.h = h

        glut.glutInitWindowSize(self.w, self.h)
        self.c = glut.glutCreateWindow(t)
        glut.glutReshapeFunc(self.reshape)
        glut.glutDisplayFunc(self.display)

    def reshape(self, w, h):
        print(f'reshape {w} {h}')

        self.w = w
        self.h = h

        gl.glViewport(0, 0, w, h)
        gl.glMatrixMode(gl.GL_PROJECTION)
        gl.glLoadIdentity()
        glu.gluOrtho2D(0, w, 0, h)
        gl.glMatrixMode(gl.GL_MODELVIEW)
        gl.glLoadIdentity()

        self.on_reshape()

    def display(self):
        print('display')

        gl.glClear(gl.GL_COLOR_BUFFER_BIT)
        self.on_render()
        glut.glutSwapBuffers()

    def on_reshape(self):
        pass

    def on_render(self):
        pass

    def title(self, t):
        pass


class Display(Window):
    def __init__(self, w):
        Window.__init__(self, 1000, 600, 'display')
        self.widget = w

    def on_reshape(self):
        self.widget.reshape(self)

    def on_render(self):
        gl.glBegin(gl.GL_QUADS)

        s = {}

        dx = self.dx
        dy = self.dy

        for x, y, a in self.widget.pixels(dict(focus=True)):
            k = (dy - y - 1, x)

            if k in s:
                s[k] = a.combine(s[k])
            else:
                s[k] = a

        for k in sorted(s):
            y, x = k
            a = s[k]

            r, g, b = a.t[2].rgb()

            x1 = x * 10
            y1 = y * 25
            x2 = x1 + 10
            y2 = y1 + 25

            gl.glColor3f(r / 255.0, g / 255.0, b / 255.0)
            gl.glVertex2i(x1, y1)
            gl.glVertex2i(x2, y1)
            gl.glVertex2i(x2, y2)
            gl.glVertex2i(x1, y2)

        gl.glEnd()

    @property
    def dx(self):
        return self.w // 10

    @property
    def dy(self):
        return self.h // 25


class EventLoop:
    def __init__(self):
        glut.glutInit(sys.argv)
        glut.glutInitDisplayMode(glut.GLUT_DOUBLE | glut.GLUT_RGBA)

    def fini(self):
        pass

    def event_loop(self, w):
        d = Display(w)
        glut.glutMainLoop()


if __name__ == '__main__':
    ted.main(sys.argv[1], EventLoop)
